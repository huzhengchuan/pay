<?php
namespace Thrift;

/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
use Thrift\Base\TBase;
use Thrift\Type\TType;
use Thrift\Type\TMessageType;
use Thrift\Exception\TException;
use Thrift\Exception\TProtocolException;
use Thrift\Protocol\TProtocol;
use Thrift\Protocol\TBinaryProtocolAccelerated;
use Thrift\Exception\TApplicationException;


final class MT4GROUP_OPT {
  const G_DELETE = 0;
  const G_ENABLE = 1;
  const G_DISABLE = 2;
  const G_LEVERAGE = 3;
  const G_SETGROUP = 4;
  static public $__names = array(
    0 => 'G_DELETE',
    1 => 'G_ENABLE',
    2 => 'G_DISABLE',
    3 => 'G_LEVERAGE',
    4 => 'G_SETGROUP',
  );
}

final class MT4DEAL_TYPE {
  const D_IN = 0;
  const D_OUT = 1;
  static public $__names = array(
    0 => 'D_IN',
    1 => 'D_OUT',
  );
}

final class MT4TRADE_TYPE {
  const T_BUY = 0;
  const T_SELL = 1;
  const T_BUY_LIMIT = 2;
  const T_SELL_LIMIT = 3;
  const T_BUY_STOP = 4;
  const T_SELL_STOP = 5;
  const T_BALANCE = 6;
  const T_CREDIT = 7;
  static public $__names = array(
    0 => 'T_BUY',
    1 => 'T_SELL',
    2 => 'T_BUY_LIMIT',
    3 => 'T_SELL_LIMIT',
    4 => 'T_BUY_STOP',
    5 => 'T_SELL_STOP',
    6 => 'T_BALANCE',
    7 => 'T_CREDIT',
  );
}

final class MT4PASSWORD_TYPE {
  const P_MASTER = 0;
  const P_INVEST = 1;
  static public $__names = array(
    0 => 'P_MASTER',
    1 => 'P_INVEST',
  );
}

final class MT4PERIOD_TYPE {
  const P_PERIOD_M1 = 0;
  const P_PERIOD_M5 = 1;
  const P_PERIOD_M15 = 2;
  const P_PERIOD_M30 = 3;
  const P_PERIOD_H1 = 4;
  const P_PERIOD_H4 = 5;
  const P_PERIOD_D1 = 6;
  const P_PERIOD_W1 = 7;
  const P_PERIOD_MN1 = 8;
  static public $__names = array(
    0 => 'P_PERIOD_M1',
    1 => 'P_PERIOD_M5',
    2 => 'P_PERIOD_M15',
    3 => 'P_PERIOD_M30',
    4 => 'P_PERIOD_H1',
    5 => 'P_PERIOD_H4',
    6 => 'P_PERIOD_D1',
    7 => 'P_PERIOD_W1',
    8 => 'P_PERIOD_MN1',
  );
}

final class MT4CHART_TYPE {
  const C_CHART_RANGE_IN = 0;
  const C_CHART_RANGE_OUT = 1;
  const C_CHART_RANGE_LAST = 2;
  static public $__names = array(
    0 => 'C_CHART_RANGE_IN',
    1 => 'C_CHART_RANGE_OUT',
    2 => 'C_CHART_RANGE_LAST',
  );
}

class MT4UserRecord {
  static $_TSPEC;

  /**
   * @var int
   */
  public $login = 0;
  /**
   * @var string
   */
  public $group = null;
  /**
   * @var string
   */
  public $password = null;
  /**
   * @var string
   */
  public $password_investor = null;
  /**
   * @var string
   */
  public $password_phone = null;
  /**
   * @var bool
   */
  public $enable = null;
  /**
   * @var bool
   */
  public $enable_change_password = null;
  /**
   * @var bool
   */
  public $enable_read_only = null;
  /**
   * @var string
   */
  public $name = null;
  /**
   * @var string
   */
  public $country = null;
  /**
   * @var string
   */
  public $city = null;
  /**
   * @var string
   */
  public $state = null;
  /**
   * @var string
   */
  public $zipcode = null;
  /**
   * @var string
   */
  public $address = null;
  /**
   * @var string
   */
  public $phone = null;
  /**
   * @var string
   */
  public $email = null;
  /**
   * @var string
   */
  public $comment = null;
  /**
   * @var string
   */
  public $id = null;
  /**
   * @var string
   */
  public $status = null;
  /**
   * @var int
   */
  public $leverage = null;
  /**
   * @var int
   */
  public $agent_account = null;
  /**
   * @var double
   */
  public $taxes = null;
  /**
   * @var bool
   */
  public $send_reports = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'login',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'group',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'password',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'password_investor',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'password_phone',
          'type' => TType::STRING,
          ),
        6 => array(
          'var' => 'enable',
          'type' => TType::BOOL,
          ),
        7 => array(
          'var' => 'enable_change_password',
          'type' => TType::BOOL,
          ),
        8 => array(
          'var' => 'enable_read_only',
          'type' => TType::BOOL,
          ),
        9 => array(
          'var' => 'name',
          'type' => TType::STRING,
          ),
        10 => array(
          'var' => 'country',
          'type' => TType::STRING,
          ),
        11 => array(
          'var' => 'city',
          'type' => TType::STRING,
          ),
        12 => array(
          'var' => 'state',
          'type' => TType::STRING,
          ),
        13 => array(
          'var' => 'zipcode',
          'type' => TType::STRING,
          ),
        14 => array(
          'var' => 'address',
          'type' => TType::STRING,
          ),
        15 => array(
          'var' => 'phone',
          'type' => TType::STRING,
          ),
        16 => array(
          'var' => 'email',
          'type' => TType::STRING,
          ),
        17 => array(
          'var' => 'comment',
          'type' => TType::STRING,
          ),
        18 => array(
          'var' => 'id',
          'type' => TType::STRING,
          ),
        19 => array(
          'var' => 'status',
          'type' => TType::STRING,
          ),
        20 => array(
          'var' => 'leverage',
          'type' => TType::I32,
          ),
        21 => array(
          'var' => 'agent_account',
          'type' => TType::I32,
          ),
        22 => array(
          'var' => 'taxes',
          'type' => TType::DOUBLE,
          ),
        23 => array(
          'var' => 'send_reports',
          'type' => TType::BOOL,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['login'])) {
        $this->login = $vals['login'];
      }
      if (isset($vals['group'])) {
        $this->group = $vals['group'];
      }
      if (isset($vals['password'])) {
        $this->password = $vals['password'];
      }
      if (isset($vals['password_investor'])) {
        $this->password_investor = $vals['password_investor'];
      }
      if (isset($vals['password_phone'])) {
        $this->password_phone = $vals['password_phone'];
      }
      if (isset($vals['enable'])) {
        $this->enable = $vals['enable'];
      }
      if (isset($vals['enable_change_password'])) {
        $this->enable_change_password = $vals['enable_change_password'];
      }
      if (isset($vals['enable_read_only'])) {
        $this->enable_read_only = $vals['enable_read_only'];
      }
      if (isset($vals['name'])) {
        $this->name = $vals['name'];
      }
      if (isset($vals['country'])) {
        $this->country = $vals['country'];
      }
      if (isset($vals['city'])) {
        $this->city = $vals['city'];
      }
      if (isset($vals['state'])) {
        $this->state = $vals['state'];
      }
      if (isset($vals['zipcode'])) {
        $this->zipcode = $vals['zipcode'];
      }
      if (isset($vals['address'])) {
        $this->address = $vals['address'];
      }
      if (isset($vals['phone'])) {
        $this->phone = $vals['phone'];
      }
      if (isset($vals['email'])) {
        $this->email = $vals['email'];
      }
      if (isset($vals['comment'])) {
        $this->comment = $vals['comment'];
      }
      if (isset($vals['id'])) {
        $this->id = $vals['id'];
      }
      if (isset($vals['status'])) {
        $this->status = $vals['status'];
      }
      if (isset($vals['leverage'])) {
        $this->leverage = $vals['leverage'];
      }
      if (isset($vals['agent_account'])) {
        $this->agent_account = $vals['agent_account'];
      }
      if (isset($vals['taxes'])) {
        $this->taxes = $vals['taxes'];
      }
      if (isset($vals['send_reports'])) {
        $this->send_reports = $vals['send_reports'];
      }
    }
  }

  public function getName() {
    return 'MT4UserRecord';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->login);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->group);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->password);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->password_investor);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->password_phone);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->enable);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->enable_change_password);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->enable_read_only);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 9:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->name);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 10:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->country);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 11:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->city);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 12:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->state);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 13:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->zipcode);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 14:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->address);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 15:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->phone);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 16:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->email);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 17:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->comment);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 18:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 19:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->status);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 20:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->leverage);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 21:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->agent_account);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 22:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->taxes);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 23:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->send_reports);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('MT4UserRecord');
    if ($this->login !== null) {
      $xfer += $output->writeFieldBegin('login', TType::I32, 1);
      $xfer += $output->writeI32($this->login);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->group !== null) {
      $xfer += $output->writeFieldBegin('group', TType::STRING, 2);
      $xfer += $output->writeString($this->group);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->password !== null) {
      $xfer += $output->writeFieldBegin('password', TType::STRING, 3);
      $xfer += $output->writeString($this->password);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->password_investor !== null) {
      $xfer += $output->writeFieldBegin('password_investor', TType::STRING, 4);
      $xfer += $output->writeString($this->password_investor);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->password_phone !== null) {
      $xfer += $output->writeFieldBegin('password_phone', TType::STRING, 5);
      $xfer += $output->writeString($this->password_phone);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->enable !== null) {
      $xfer += $output->writeFieldBegin('enable', TType::BOOL, 6);
      $xfer += $output->writeBool($this->enable);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->enable_change_password !== null) {
      $xfer += $output->writeFieldBegin('enable_change_password', TType::BOOL, 7);
      $xfer += $output->writeBool($this->enable_change_password);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->enable_read_only !== null) {
      $xfer += $output->writeFieldBegin('enable_read_only', TType::BOOL, 8);
      $xfer += $output->writeBool($this->enable_read_only);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->name !== null) {
      $xfer += $output->writeFieldBegin('name', TType::STRING, 9);
      $xfer += $output->writeString($this->name);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->country !== null) {
      $xfer += $output->writeFieldBegin('country', TType::STRING, 10);
      $xfer += $output->writeString($this->country);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->city !== null) {
      $xfer += $output->writeFieldBegin('city', TType::STRING, 11);
      $xfer += $output->writeString($this->city);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->state !== null) {
      $xfer += $output->writeFieldBegin('state', TType::STRING, 12);
      $xfer += $output->writeString($this->state);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->zipcode !== null) {
      $xfer += $output->writeFieldBegin('zipcode', TType::STRING, 13);
      $xfer += $output->writeString($this->zipcode);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->address !== null) {
      $xfer += $output->writeFieldBegin('address', TType::STRING, 14);
      $xfer += $output->writeString($this->address);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->phone !== null) {
      $xfer += $output->writeFieldBegin('phone', TType::STRING, 15);
      $xfer += $output->writeString($this->phone);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->email !== null) {
      $xfer += $output->writeFieldBegin('email', TType::STRING, 16);
      $xfer += $output->writeString($this->email);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->comment !== null) {
      $xfer += $output->writeFieldBegin('comment', TType::STRING, 17);
      $xfer += $output->writeString($this->comment);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->id !== null) {
      $xfer += $output->writeFieldBegin('id', TType::STRING, 18);
      $xfer += $output->writeString($this->id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->status !== null) {
      $xfer += $output->writeFieldBegin('status', TType::STRING, 19);
      $xfer += $output->writeString($this->status);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->leverage !== null) {
      $xfer += $output->writeFieldBegin('leverage', TType::I32, 20);
      $xfer += $output->writeI32($this->leverage);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->agent_account !== null) {
      $xfer += $output->writeFieldBegin('agent_account', TType::I32, 21);
      $xfer += $output->writeI32($this->agent_account);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->taxes !== null) {
      $xfer += $output->writeFieldBegin('taxes', TType::DOUBLE, 22);
      $xfer += $output->writeDouble($this->taxes);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->send_reports !== null) {
      $xfer += $output->writeFieldBegin('send_reports', TType::BOOL, 23);
      $xfer += $output->writeBool($this->send_reports);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class MT4GroupCommand {
  static $_TSPEC;

  /**
   * @var int[]
   */
  public $user_logins = null;
  /**
   * @var int
   */
  public $group_opt = null;
  /**
   * @var string
   */
  public $newgroup = null;
  /**
   * @var int
   */
  public $leverage = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'user_logins',
          'type' => TType::LST,
          'etype' => TType::I32,
          'elem' => array(
            'type' => TType::I32,
            ),
          ),
        2 => array(
          'var' => 'group_opt',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'newgroup',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'leverage',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['user_logins'])) {
        $this->user_logins = $vals['user_logins'];
      }
      if (isset($vals['group_opt'])) {
        $this->group_opt = $vals['group_opt'];
      }
      if (isset($vals['newgroup'])) {
        $this->newgroup = $vals['newgroup'];
      }
      if (isset($vals['leverage'])) {
        $this->leverage = $vals['leverage'];
      }
    }
  }

  public function getName() {
    return 'MT4GroupCommand';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::LST) {
            $this->user_logins = array();
            $_size0 = 0;
            $_etype3 = 0;
            $xfer += $input->readListBegin($_etype3, $_size0);
            for ($_i4 = 0; $_i4 < $_size0; ++$_i4)
            {
              $elem5 = null;
              $xfer += $input->readI32($elem5);
              $this->user_logins []= $elem5;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->group_opt);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->newgroup);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->leverage);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('MT4GroupCommand');
    if ($this->user_logins !== null) {
      if (!is_array($this->user_logins)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('user_logins', TType::LST, 1);
      {
        $output->writeListBegin(TType::I32, count($this->user_logins));
        {
          foreach ($this->user_logins as $iter6)
          {
            $xfer += $output->writeI32($iter6);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->group_opt !== null) {
      $xfer += $output->writeFieldBegin('group_opt', TType::I32, 2);
      $xfer += $output->writeI32($this->group_opt);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->newgroup !== null) {
      $xfer += $output->writeFieldBegin('newgroup', TType::STRING, 3);
      $xfer += $output->writeString($this->newgroup);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->leverage !== null) {
      $xfer += $output->writeFieldBegin('leverage', TType::I32, 4);
      $xfer += $output->writeI32($this->leverage);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class MT4TradeRecord {
  static $_TSPEC;

  /**
   * @var int
   */
  public $order = null;
  /**
   * @var int
   */
  public $login = null;
  /**
   * @var string
   */
  public $symbol = null;
  /**
   * @var int
   */
  public $digits = null;
  /**
   * @var int
   */
  public $cmd = null;
  /**
   * @var int
   */
  public $open_time = null;
  /**
   * @var double
   */
  public $open_price = null;
  /**
   * @var double
   */
  public $sl = null;
  /**
   * @var double
   */
  public $tp = null;
  /**
   * @var int
   */
  public $close_time = null;
  /**
   * @var int
   */
  public $value_date = null;
  /**
   * @var int
   */
  public $expiration = null;
  /**
   * @var double
   */
  public $commission = null;
  /**
   * @var double
   */
  public $swap = null;
  /**
   * @var double
   */
  public $close_price = null;
  /**
   * @var double
   */
  public $profit = null;
  /**
   * @var double
   */
  public $taxes = null;
  /**
   * @var string
   */
  public $comment = null;
  /**
   * @var int
   */
  public $timestamp = null;
  /**
   * @var int
   */
  public $volume = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'order',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'login',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'symbol',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'digits',
          'type' => TType::I32,
          ),
        5 => array(
          'var' => 'cmd',
          'type' => TType::I32,
          ),
        7 => array(
          'var' => 'open_time',
          'type' => TType::I64,
          ),
        8 => array(
          'var' => 'open_price',
          'type' => TType::DOUBLE,
          ),
        9 => array(
          'var' => 'sl',
          'type' => TType::DOUBLE,
          ),
        10 => array(
          'var' => 'tp',
          'type' => TType::DOUBLE,
          ),
        11 => array(
          'var' => 'close_time',
          'type' => TType::I64,
          ),
        12 => array(
          'var' => 'value_date',
          'type' => TType::I64,
          ),
        13 => array(
          'var' => 'expiration',
          'type' => TType::I64,
          ),
        14 => array(
          'var' => 'commission',
          'type' => TType::DOUBLE,
          ),
        15 => array(
          'var' => 'swap',
          'type' => TType::DOUBLE,
          ),
        16 => array(
          'var' => 'close_price',
          'type' => TType::DOUBLE,
          ),
        17 => array(
          'var' => 'profit',
          'type' => TType::DOUBLE,
          ),
        18 => array(
          'var' => 'taxes',
          'type' => TType::DOUBLE,
          ),
        19 => array(
          'var' => 'comment',
          'type' => TType::STRING,
          ),
        20 => array(
          'var' => 'timestamp',
          'type' => TType::I64,
          ),
        21 => array(
          'var' => 'volume',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['order'])) {
        $this->order = $vals['order'];
      }
      if (isset($vals['login'])) {
        $this->login = $vals['login'];
      }
      if (isset($vals['symbol'])) {
        $this->symbol = $vals['symbol'];
      }
      if (isset($vals['digits'])) {
        $this->digits = $vals['digits'];
      }
      if (isset($vals['cmd'])) {
        $this->cmd = $vals['cmd'];
      }
      if (isset($vals['open_time'])) {
        $this->open_time = $vals['open_time'];
      }
      if (isset($vals['open_price'])) {
        $this->open_price = $vals['open_price'];
      }
      if (isset($vals['sl'])) {
        $this->sl = $vals['sl'];
      }
      if (isset($vals['tp'])) {
        $this->tp = $vals['tp'];
      }
      if (isset($vals['close_time'])) {
        $this->close_time = $vals['close_time'];
      }
      if (isset($vals['value_date'])) {
        $this->value_date = $vals['value_date'];
      }
      if (isset($vals['expiration'])) {
        $this->expiration = $vals['expiration'];
      }
      if (isset($vals['commission'])) {
        $this->commission = $vals['commission'];
      }
      if (isset($vals['swap'])) {
        $this->swap = $vals['swap'];
      }
      if (isset($vals['close_price'])) {
        $this->close_price = $vals['close_price'];
      }
      if (isset($vals['profit'])) {
        $this->profit = $vals['profit'];
      }
      if (isset($vals['taxes'])) {
        $this->taxes = $vals['taxes'];
      }
      if (isset($vals['comment'])) {
        $this->comment = $vals['comment'];
      }
      if (isset($vals['timestamp'])) {
        $this->timestamp = $vals['timestamp'];
      }
      if (isset($vals['volume'])) {
        $this->volume = $vals['volume'];
      }
    }
  }

  public function getName() {
    return 'MT4TradeRecord';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->order);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->login);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->symbol);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->digits);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->cmd);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->open_time);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->open_price);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 9:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->sl);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 10:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->tp);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 11:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->close_time);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 12:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->value_date);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 13:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->expiration);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 14:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->commission);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 15:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->swap);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 16:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->close_price);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 17:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->profit);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 18:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->taxes);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 19:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->comment);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 20:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->timestamp);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 21:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->volume);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('MT4TradeRecord');
    if ($this->order !== null) {
      $xfer += $output->writeFieldBegin('order', TType::I32, 1);
      $xfer += $output->writeI32($this->order);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->login !== null) {
      $xfer += $output->writeFieldBegin('login', TType::I32, 2);
      $xfer += $output->writeI32($this->login);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->symbol !== null) {
      $xfer += $output->writeFieldBegin('symbol', TType::STRING, 3);
      $xfer += $output->writeString($this->symbol);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->digits !== null) {
      $xfer += $output->writeFieldBegin('digits', TType::I32, 4);
      $xfer += $output->writeI32($this->digits);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->cmd !== null) {
      $xfer += $output->writeFieldBegin('cmd', TType::I32, 5);
      $xfer += $output->writeI32($this->cmd);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->open_time !== null) {
      $xfer += $output->writeFieldBegin('open_time', TType::I64, 7);
      $xfer += $output->writeI64($this->open_time);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->open_price !== null) {
      $xfer += $output->writeFieldBegin('open_price', TType::DOUBLE, 8);
      $xfer += $output->writeDouble($this->open_price);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->sl !== null) {
      $xfer += $output->writeFieldBegin('sl', TType::DOUBLE, 9);
      $xfer += $output->writeDouble($this->sl);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->tp !== null) {
      $xfer += $output->writeFieldBegin('tp', TType::DOUBLE, 10);
      $xfer += $output->writeDouble($this->tp);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->close_time !== null) {
      $xfer += $output->writeFieldBegin('close_time', TType::I64, 11);
      $xfer += $output->writeI64($this->close_time);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->value_date !== null) {
      $xfer += $output->writeFieldBegin('value_date', TType::I64, 12);
      $xfer += $output->writeI64($this->value_date);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->expiration !== null) {
      $xfer += $output->writeFieldBegin('expiration', TType::I64, 13);
      $xfer += $output->writeI64($this->expiration);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->commission !== null) {
      $xfer += $output->writeFieldBegin('commission', TType::DOUBLE, 14);
      $xfer += $output->writeDouble($this->commission);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->swap !== null) {
      $xfer += $output->writeFieldBegin('swap', TType::DOUBLE, 15);
      $xfer += $output->writeDouble($this->swap);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->close_price !== null) {
      $xfer += $output->writeFieldBegin('close_price', TType::DOUBLE, 16);
      $xfer += $output->writeDouble($this->close_price);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->profit !== null) {
      $xfer += $output->writeFieldBegin('profit', TType::DOUBLE, 17);
      $xfer += $output->writeDouble($this->profit);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->taxes !== null) {
      $xfer += $output->writeFieldBegin('taxes', TType::DOUBLE, 18);
      $xfer += $output->writeDouble($this->taxes);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->comment !== null) {
      $xfer += $output->writeFieldBegin('comment', TType::STRING, 19);
      $xfer += $output->writeString($this->comment);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->timestamp !== null) {
      $xfer += $output->writeFieldBegin('timestamp', TType::I64, 20);
      $xfer += $output->writeI64($this->timestamp);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->volume !== null) {
      $xfer += $output->writeFieldBegin('volume', TType::I32, 21);
      $xfer += $output->writeI32($this->volume);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class MT4ConSession {
  static $_TSPEC;

  /**
   * @var int
   */
  public $open_hour = null;
  /**
   * @var int
   */
  public $open_min = null;
  /**
   * @var int
   */
  public $close_hour = null;
  /**
   * @var int
   */
  public $close_min = null;
  /**
   * @var int
   */
  public $open = null;
  /**
   * @var int
   */
  public $close = null;
  /**
   * @var int[]
   */
  public $align = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'open_hour',
          'type' => TType::I16,
          ),
        2 => array(
          'var' => 'open_min',
          'type' => TType::I16,
          ),
        3 => array(
          'var' => 'close_hour',
          'type' => TType::I16,
          ),
        4 => array(
          'var' => 'close_min',
          'type' => TType::I16,
          ),
        5 => array(
          'var' => 'open',
          'type' => TType::I32,
          ),
        6 => array(
          'var' => 'close',
          'type' => TType::I32,
          ),
        7 => array(
          'var' => 'align',
          'type' => TType::LST,
          'etype' => TType::I16,
          'elem' => array(
            'type' => TType::I16,
            ),
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['open_hour'])) {
        $this->open_hour = $vals['open_hour'];
      }
      if (isset($vals['open_min'])) {
        $this->open_min = $vals['open_min'];
      }
      if (isset($vals['close_hour'])) {
        $this->close_hour = $vals['close_hour'];
      }
      if (isset($vals['close_min'])) {
        $this->close_min = $vals['close_min'];
      }
      if (isset($vals['open'])) {
        $this->open = $vals['open'];
      }
      if (isset($vals['close'])) {
        $this->close = $vals['close'];
      }
      if (isset($vals['align'])) {
        $this->align = $vals['align'];
      }
    }
  }

  public function getName() {
    return 'MT4ConSession';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I16) {
            $xfer += $input->readI16($this->open_hour);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I16) {
            $xfer += $input->readI16($this->open_min);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I16) {
            $xfer += $input->readI16($this->close_hour);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::I16) {
            $xfer += $input->readI16($this->close_min);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->open);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->close);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::LST) {
            $this->align = array();
            $_size7 = 0;
            $_etype10 = 0;
            $xfer += $input->readListBegin($_etype10, $_size7);
            for ($_i11 = 0; $_i11 < $_size7; ++$_i11)
            {
              $elem12 = null;
              $xfer += $input->readI16($elem12);
              $this->align []= $elem12;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('MT4ConSession');
    if ($this->open_hour !== null) {
      $xfer += $output->writeFieldBegin('open_hour', TType::I16, 1);
      $xfer += $output->writeI16($this->open_hour);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->open_min !== null) {
      $xfer += $output->writeFieldBegin('open_min', TType::I16, 2);
      $xfer += $output->writeI16($this->open_min);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->close_hour !== null) {
      $xfer += $output->writeFieldBegin('close_hour', TType::I16, 3);
      $xfer += $output->writeI16($this->close_hour);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->close_min !== null) {
      $xfer += $output->writeFieldBegin('close_min', TType::I16, 4);
      $xfer += $output->writeI16($this->close_min);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->open !== null) {
      $xfer += $output->writeFieldBegin('open', TType::I32, 5);
      $xfer += $output->writeI32($this->open);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->close !== null) {
      $xfer += $output->writeFieldBegin('close', TType::I32, 6);
      $xfer += $output->writeI32($this->close);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->align !== null) {
      if (!is_array($this->align)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('align', TType::LST, 7);
      {
        $output->writeListBegin(TType::I16, count($this->align));
        {
          foreach ($this->align as $iter13)
          {
            $xfer += $output->writeI16($iter13);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class MT4ConSessions {
  static $_TSPEC;

  /**
   * @var MT4ConSession[]
   */
  public $quote = null;
  /**
   * @var MT4ConSession[]
   */
  public $trade = null;
  /**
   * @var int
   */
  public $quote_overnight = null;
  /**
   * @var int
   */
  public $trade_overnight = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'quote',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => 'MT4ConSession',
            ),
          ),
        2 => array(
          'var' => 'trade',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => 'MT4ConSession',
            ),
          ),
        3 => array(
          'var' => 'quote_overnight',
          'type' => TType::I32,
          ),
        4 => array(
          'var' => 'trade_overnight',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['quote'])) {
        $this->quote = $vals['quote'];
      }
      if (isset($vals['trade'])) {
        $this->trade = $vals['trade'];
      }
      if (isset($vals['quote_overnight'])) {
        $this->quote_overnight = $vals['quote_overnight'];
      }
      if (isset($vals['trade_overnight'])) {
        $this->trade_overnight = $vals['trade_overnight'];
      }
    }
  }

  public function getName() {
    return 'MT4ConSessions';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::LST) {
            $this->quote = array();
            $_size14 = 0;
            $_etype17 = 0;
            $xfer += $input->readListBegin($_etype17, $_size14);
            for ($_i18 = 0; $_i18 < $_size14; ++$_i18)
            {
              $elem19 = null;
              $elem19 = new MT4ConSession();
              $xfer += $elem19->read($input);
              $this->quote []= $elem19;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::LST) {
            $this->trade = array();
            $_size20 = 0;
            $_etype23 = 0;
            $xfer += $input->readListBegin($_etype23, $_size20);
            for ($_i24 = 0; $_i24 < $_size20; ++$_i24)
            {
              $elem25 = null;
              $elem25 = new MT4ConSession();
              $xfer += $elem25->read($input);
              $this->trade []= $elem25;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->quote_overnight);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->trade_overnight);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('MT4ConSessions');
    if ($this->quote !== null) {
      if (!is_array($this->quote)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('quote', TType::LST, 1);
      {
        $output->writeListBegin(TType::STRUCT, count($this->quote));
        {
          foreach ($this->quote as $iter26)
          {
            $xfer += $iter26->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->trade !== null) {
      if (!is_array($this->trade)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('trade', TType::LST, 2);
      {
        $output->writeListBegin(TType::STRUCT, count($this->trade));
        {
          foreach ($this->trade as $iter27)
          {
            $xfer += $iter27->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->quote_overnight !== null) {
      $xfer += $output->writeFieldBegin('quote_overnight', TType::I32, 3);
      $xfer += $output->writeI32($this->quote_overnight);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->trade_overnight !== null) {
      $xfer += $output->writeFieldBegin('trade_overnight', TType::I32, 4);
      $xfer += $output->writeI32($this->trade_overnight);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class MT4ConSymbol {
  static $_TSPEC;

  /**
   * @var double
   */
  public $bid_tickvalue = null;
  /**
   * @var double
   */
  public $ask_tickvalue = null;
  /**
   * @var string
   */
  public $symbol = null;
  /**
   * @var string
   */
  public $description = null;
  /**
   * @var string
   */
  public $source = null;
  /**
   * @var string
   */
  public $currency = null;
  /**
   * @var int
   */
  public $type = null;
  /**
   * @var int
   */
  public $digits = null;
  /**
   * @var int
   */
  public $trade = null;
  /**
   * @var int
   */
  public $count = null;
  /**
   * @var int
   */
  public $count_original = null;
  /**
   * @var int
   */
  public $realtime = null;
  /**
   * @var int
   */
  public $starting = null;
  /**
   * @var int
   */
  public $expiration = null;
  /**
   * @var MT4ConSessions[]
   */
  public $sessions = null;
  /**
   * @var int
   */
  public $profit_mode = null;
  /**
   * @var int
   */
  public $profit_reserved = null;
  /**
   * @var int
   */
  public $filter = null;
  /**
   * @var int
   */
  public $filter_counter = null;
  /**
   * @var double
   */
  public $filter_limit = null;
  /**
   * @var int
   */
  public $filter_smoothing = null;
  /**
   * @var double
   */
  public $filter_reserved = null;
  /**
   * @var int
   */
  public $logging = null;
  /**
   * @var int
   */
  public $spread = null;
  /**
   * @var int
   */
  public $spread_balance = null;
  /**
   * @var int
   */
  public $exemode = null;
  /**
   * @var int
   */
  public $swap_enable = null;
  /**
   * @var int
   */
  public $swap_type = null;
  /**
   * @var double
   */
  public $swap_long = null;
  /**
   * @var double
   */
  public $swap_short = null;
  /**
   * @var int
   */
  public $swap_rollover3days = null;
  /**
   * @var double
   */
  public $contract_size = null;
  /**
   * @var double
   */
  public $tick_value = null;
  /**
   * @var double
   */
  public $tick_size = null;
  /**
   * @var int
   */
  public $stops_level = null;
  /**
   * @var int
   */
  public $gtc_pendings = null;
  /**
   * @var int
   */
  public $margin_mode = null;
  /**
   * @var double
   */
  public $margin_initial = null;
  /**
   * @var double
   */
  public $margin_maintenance = null;
  /**
   * @var double
   */
  public $margin_hedged = null;
  /**
   * @var double
   */
  public $margin_divider = null;
  /**
   * @var double
   */
  public $point = null;
  /**
   * @var double
   */
  public $multiply = null;
  /**
   * @var int
   */
  public $long_only = null;
  /**
   * @var int
   */
  public $instant_max_volume = null;
  /**
   * @var string
   */
  public $margin_currency = null;
  /**
   * @var int
   */
  public $freeze_level = null;
  /**
   * @var int
   */
  public $margin_hedged_strong = null;
  /**
   * @var int
   */
  public $value_date = null;
  /**
   * @var int
   */
  public $quotes_delay = null;
  /**
   * @var int
   */
  public $swap_openprice = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'bid_tickvalue',
          'type' => TType::DOUBLE,
          ),
        2 => array(
          'var' => 'ask_tickvalue',
          'type' => TType::DOUBLE,
          ),
        3 => array(
          'var' => 'symbol',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'description',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'source',
          'type' => TType::STRING,
          ),
        6 => array(
          'var' => 'currency',
          'type' => TType::STRING,
          ),
        7 => array(
          'var' => 'type',
          'type' => TType::I32,
          ),
        8 => array(
          'var' => 'digits',
          'type' => TType::I32,
          ),
        9 => array(
          'var' => 'trade',
          'type' => TType::I32,
          ),
        10 => array(
          'var' => 'count',
          'type' => TType::I32,
          ),
        11 => array(
          'var' => 'count_original',
          'type' => TType::I32,
          ),
        12 => array(
          'var' => 'realtime',
          'type' => TType::I32,
          ),
        13 => array(
          'var' => 'starting',
          'type' => TType::I64,
          ),
        14 => array(
          'var' => 'expiration',
          'type' => TType::I64,
          ),
        15 => array(
          'var' => 'sessions',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => 'MT4ConSessions',
            ),
          ),
        16 => array(
          'var' => 'profit_mode',
          'type' => TType::I32,
          ),
        17 => array(
          'var' => 'profit_reserved',
          'type' => TType::I32,
          ),
        18 => array(
          'var' => 'filter',
          'type' => TType::I32,
          ),
        19 => array(
          'var' => 'filter_counter',
          'type' => TType::I32,
          ),
        20 => array(
          'var' => 'filter_limit',
          'type' => TType::DOUBLE,
          ),
        21 => array(
          'var' => 'filter_smoothing',
          'type' => TType::I32,
          ),
        22 => array(
          'var' => 'filter_reserved',
          'type' => TType::DOUBLE,
          ),
        23 => array(
          'var' => 'logging',
          'type' => TType::I32,
          ),
        24 => array(
          'var' => 'spread',
          'type' => TType::I32,
          ),
        25 => array(
          'var' => 'spread_balance',
          'type' => TType::I32,
          ),
        26 => array(
          'var' => 'exemode',
          'type' => TType::I32,
          ),
        27 => array(
          'var' => 'swap_enable',
          'type' => TType::I32,
          ),
        28 => array(
          'var' => 'swap_type',
          'type' => TType::I32,
          ),
        29 => array(
          'var' => 'swap_long',
          'type' => TType::DOUBLE,
          ),
        30 => array(
          'var' => 'swap_short',
          'type' => TType::DOUBLE,
          ),
        31 => array(
          'var' => 'swap_rollover3days',
          'type' => TType::I32,
          ),
        32 => array(
          'var' => 'contract_size',
          'type' => TType::DOUBLE,
          ),
        33 => array(
          'var' => 'tick_value',
          'type' => TType::DOUBLE,
          ),
        34 => array(
          'var' => 'tick_size',
          'type' => TType::DOUBLE,
          ),
        35 => array(
          'var' => 'stops_level',
          'type' => TType::I32,
          ),
        36 => array(
          'var' => 'gtc_pendings',
          'type' => TType::I32,
          ),
        37 => array(
          'var' => 'margin_mode',
          'type' => TType::I32,
          ),
        38 => array(
          'var' => 'margin_initial',
          'type' => TType::DOUBLE,
          ),
        39 => array(
          'var' => 'margin_maintenance',
          'type' => TType::DOUBLE,
          ),
        40 => array(
          'var' => 'margin_hedged',
          'type' => TType::DOUBLE,
          ),
        41 => array(
          'var' => 'margin_divider',
          'type' => TType::DOUBLE,
          ),
        42 => array(
          'var' => 'point',
          'type' => TType::DOUBLE,
          ),
        43 => array(
          'var' => 'multiply',
          'type' => TType::DOUBLE,
          ),
        44 => array(
          'var' => 'long_only',
          'type' => TType::I32,
          ),
        45 => array(
          'var' => 'instant_max_volume',
          'type' => TType::I32,
          ),
        46 => array(
          'var' => 'margin_currency',
          'type' => TType::STRING,
          ),
        47 => array(
          'var' => 'freeze_level',
          'type' => TType::I32,
          ),
        48 => array(
          'var' => 'margin_hedged_strong',
          'type' => TType::I32,
          ),
        49 => array(
          'var' => 'value_date',
          'type' => TType::I64,
          ),
        50 => array(
          'var' => 'quotes_delay',
          'type' => TType::I32,
          ),
        51 => array(
          'var' => 'swap_openprice',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['bid_tickvalue'])) {
        $this->bid_tickvalue = $vals['bid_tickvalue'];
      }
      if (isset($vals['ask_tickvalue'])) {
        $this->ask_tickvalue = $vals['ask_tickvalue'];
      }
      if (isset($vals['symbol'])) {
        $this->symbol = $vals['symbol'];
      }
      if (isset($vals['description'])) {
        $this->description = $vals['description'];
      }
      if (isset($vals['source'])) {
        $this->source = $vals['source'];
      }
      if (isset($vals['currency'])) {
        $this->currency = $vals['currency'];
      }
      if (isset($vals['type'])) {
        $this->type = $vals['type'];
      }
      if (isset($vals['digits'])) {
        $this->digits = $vals['digits'];
      }
      if (isset($vals['trade'])) {
        $this->trade = $vals['trade'];
      }
      if (isset($vals['count'])) {
        $this->count = $vals['count'];
      }
      if (isset($vals['count_original'])) {
        $this->count_original = $vals['count_original'];
      }
      if (isset($vals['realtime'])) {
        $this->realtime = $vals['realtime'];
      }
      if (isset($vals['starting'])) {
        $this->starting = $vals['starting'];
      }
      if (isset($vals['expiration'])) {
        $this->expiration = $vals['expiration'];
      }
      if (isset($vals['sessions'])) {
        $this->sessions = $vals['sessions'];
      }
      if (isset($vals['profit_mode'])) {
        $this->profit_mode = $vals['profit_mode'];
      }
      if (isset($vals['profit_reserved'])) {
        $this->profit_reserved = $vals['profit_reserved'];
      }
      if (isset($vals['filter'])) {
        $this->filter = $vals['filter'];
      }
      if (isset($vals['filter_counter'])) {
        $this->filter_counter = $vals['filter_counter'];
      }
      if (isset($vals['filter_limit'])) {
        $this->filter_limit = $vals['filter_limit'];
      }
      if (isset($vals['filter_smoothing'])) {
        $this->filter_smoothing = $vals['filter_smoothing'];
      }
      if (isset($vals['filter_reserved'])) {
        $this->filter_reserved = $vals['filter_reserved'];
      }
      if (isset($vals['logging'])) {
        $this->logging = $vals['logging'];
      }
      if (isset($vals['spread'])) {
        $this->spread = $vals['spread'];
      }
      if (isset($vals['spread_balance'])) {
        $this->spread_balance = $vals['spread_balance'];
      }
      if (isset($vals['exemode'])) {
        $this->exemode = $vals['exemode'];
      }
      if (isset($vals['swap_enable'])) {
        $this->swap_enable = $vals['swap_enable'];
      }
      if (isset($vals['swap_type'])) {
        $this->swap_type = $vals['swap_type'];
      }
      if (isset($vals['swap_long'])) {
        $this->swap_long = $vals['swap_long'];
      }
      if (isset($vals['swap_short'])) {
        $this->swap_short = $vals['swap_short'];
      }
      if (isset($vals['swap_rollover3days'])) {
        $this->swap_rollover3days = $vals['swap_rollover3days'];
      }
      if (isset($vals['contract_size'])) {
        $this->contract_size = $vals['contract_size'];
      }
      if (isset($vals['tick_value'])) {
        $this->tick_value = $vals['tick_value'];
      }
      if (isset($vals['tick_size'])) {
        $this->tick_size = $vals['tick_size'];
      }
      if (isset($vals['stops_level'])) {
        $this->stops_level = $vals['stops_level'];
      }
      if (isset($vals['gtc_pendings'])) {
        $this->gtc_pendings = $vals['gtc_pendings'];
      }
      if (isset($vals['margin_mode'])) {
        $this->margin_mode = $vals['margin_mode'];
      }
      if (isset($vals['margin_initial'])) {
        $this->margin_initial = $vals['margin_initial'];
      }
      if (isset($vals['margin_maintenance'])) {
        $this->margin_maintenance = $vals['margin_maintenance'];
      }
      if (isset($vals['margin_hedged'])) {
        $this->margin_hedged = $vals['margin_hedged'];
      }
      if (isset($vals['margin_divider'])) {
        $this->margin_divider = $vals['margin_divider'];
      }
      if (isset($vals['point'])) {
        $this->point = $vals['point'];
      }
      if (isset($vals['multiply'])) {
        $this->multiply = $vals['multiply'];
      }
      if (isset($vals['long_only'])) {
        $this->long_only = $vals['long_only'];
      }
      if (isset($vals['instant_max_volume'])) {
        $this->instant_max_volume = $vals['instant_max_volume'];
      }
      if (isset($vals['margin_currency'])) {
        $this->margin_currency = $vals['margin_currency'];
      }
      if (isset($vals['freeze_level'])) {
        $this->freeze_level = $vals['freeze_level'];
      }
      if (isset($vals['margin_hedged_strong'])) {
        $this->margin_hedged_strong = $vals['margin_hedged_strong'];
      }
      if (isset($vals['value_date'])) {
        $this->value_date = $vals['value_date'];
      }
      if (isset($vals['quotes_delay'])) {
        $this->quotes_delay = $vals['quotes_delay'];
      }
      if (isset($vals['swap_openprice'])) {
        $this->swap_openprice = $vals['swap_openprice'];
      }
    }
  }

  public function getName() {
    return 'MT4ConSymbol';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->bid_tickvalue);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->ask_tickvalue);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->symbol);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->description);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->source);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->currency);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->type);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->digits);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 9:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->trade);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 10:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->count);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 11:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->count_original);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 12:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->realtime);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 13:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->starting);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 14:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->expiration);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 15:
          if ($ftype == TType::LST) {
            $this->sessions = array();
            $_size28 = 0;
            $_etype31 = 0;
            $xfer += $input->readListBegin($_etype31, $_size28);
            for ($_i32 = 0; $_i32 < $_size28; ++$_i32)
            {
              $elem33 = null;
              $elem33 = new MT4ConSessions();
              $xfer += $elem33->read($input);
              $this->sessions []= $elem33;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 16:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->profit_mode);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 17:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->profit_reserved);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 18:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->filter);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 19:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->filter_counter);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 20:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->filter_limit);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 21:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->filter_smoothing);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 22:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->filter_reserved);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 23:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->logging);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 24:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->spread);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 25:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->spread_balance);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 26:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->exemode);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 27:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->swap_enable);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 28:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->swap_type);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 29:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->swap_long);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 30:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->swap_short);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 31:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->swap_rollover3days);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 32:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->contract_size);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 33:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->tick_value);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 34:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->tick_size);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 35:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->stops_level);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 36:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->gtc_pendings);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 37:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->margin_mode);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 38:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->margin_initial);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 39:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->margin_maintenance);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 40:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->margin_hedged);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 41:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->margin_divider);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 42:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->point);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 43:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->multiply);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 44:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->long_only);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 45:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->instant_max_volume);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 46:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->margin_currency);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 47:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->freeze_level);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 48:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->margin_hedged_strong);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 49:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->value_date);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 50:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->quotes_delay);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 51:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->swap_openprice);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('MT4ConSymbol');
    if ($this->bid_tickvalue !== null) {
      $xfer += $output->writeFieldBegin('bid_tickvalue', TType::DOUBLE, 1);
      $xfer += $output->writeDouble($this->bid_tickvalue);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ask_tickvalue !== null) {
      $xfer += $output->writeFieldBegin('ask_tickvalue', TType::DOUBLE, 2);
      $xfer += $output->writeDouble($this->ask_tickvalue);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->symbol !== null) {
      $xfer += $output->writeFieldBegin('symbol', TType::STRING, 3);
      $xfer += $output->writeString($this->symbol);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->description !== null) {
      $xfer += $output->writeFieldBegin('description', TType::STRING, 4);
      $xfer += $output->writeString($this->description);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->source !== null) {
      $xfer += $output->writeFieldBegin('source', TType::STRING, 5);
      $xfer += $output->writeString($this->source);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->currency !== null) {
      $xfer += $output->writeFieldBegin('currency', TType::STRING, 6);
      $xfer += $output->writeString($this->currency);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->type !== null) {
      $xfer += $output->writeFieldBegin('type', TType::I32, 7);
      $xfer += $output->writeI32($this->type);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->digits !== null) {
      $xfer += $output->writeFieldBegin('digits', TType::I32, 8);
      $xfer += $output->writeI32($this->digits);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->trade !== null) {
      $xfer += $output->writeFieldBegin('trade', TType::I32, 9);
      $xfer += $output->writeI32($this->trade);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->count !== null) {
      $xfer += $output->writeFieldBegin('count', TType::I32, 10);
      $xfer += $output->writeI32($this->count);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->count_original !== null) {
      $xfer += $output->writeFieldBegin('count_original', TType::I32, 11);
      $xfer += $output->writeI32($this->count_original);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->realtime !== null) {
      $xfer += $output->writeFieldBegin('realtime', TType::I32, 12);
      $xfer += $output->writeI32($this->realtime);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->starting !== null) {
      $xfer += $output->writeFieldBegin('starting', TType::I64, 13);
      $xfer += $output->writeI64($this->starting);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->expiration !== null) {
      $xfer += $output->writeFieldBegin('expiration', TType::I64, 14);
      $xfer += $output->writeI64($this->expiration);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->sessions !== null) {
      if (!is_array($this->sessions)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('sessions', TType::LST, 15);
      {
        $output->writeListBegin(TType::STRUCT, count($this->sessions));
        {
          foreach ($this->sessions as $iter34)
          {
            $xfer += $iter34->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->profit_mode !== null) {
      $xfer += $output->writeFieldBegin('profit_mode', TType::I32, 16);
      $xfer += $output->writeI32($this->profit_mode);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->profit_reserved !== null) {
      $xfer += $output->writeFieldBegin('profit_reserved', TType::I32, 17);
      $xfer += $output->writeI32($this->profit_reserved);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->filter !== null) {
      $xfer += $output->writeFieldBegin('filter', TType::I32, 18);
      $xfer += $output->writeI32($this->filter);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->filter_counter !== null) {
      $xfer += $output->writeFieldBegin('filter_counter', TType::I32, 19);
      $xfer += $output->writeI32($this->filter_counter);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->filter_limit !== null) {
      $xfer += $output->writeFieldBegin('filter_limit', TType::DOUBLE, 20);
      $xfer += $output->writeDouble($this->filter_limit);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->filter_smoothing !== null) {
      $xfer += $output->writeFieldBegin('filter_smoothing', TType::I32, 21);
      $xfer += $output->writeI32($this->filter_smoothing);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->filter_reserved !== null) {
      $xfer += $output->writeFieldBegin('filter_reserved', TType::DOUBLE, 22);
      $xfer += $output->writeDouble($this->filter_reserved);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->logging !== null) {
      $xfer += $output->writeFieldBegin('logging', TType::I32, 23);
      $xfer += $output->writeI32($this->logging);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->spread !== null) {
      $xfer += $output->writeFieldBegin('spread', TType::I32, 24);
      $xfer += $output->writeI32($this->spread);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->spread_balance !== null) {
      $xfer += $output->writeFieldBegin('spread_balance', TType::I32, 25);
      $xfer += $output->writeI32($this->spread_balance);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->exemode !== null) {
      $xfer += $output->writeFieldBegin('exemode', TType::I32, 26);
      $xfer += $output->writeI32($this->exemode);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->swap_enable !== null) {
      $xfer += $output->writeFieldBegin('swap_enable', TType::I32, 27);
      $xfer += $output->writeI32($this->swap_enable);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->swap_type !== null) {
      $xfer += $output->writeFieldBegin('swap_type', TType::I32, 28);
      $xfer += $output->writeI32($this->swap_type);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->swap_long !== null) {
      $xfer += $output->writeFieldBegin('swap_long', TType::DOUBLE, 29);
      $xfer += $output->writeDouble($this->swap_long);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->swap_short !== null) {
      $xfer += $output->writeFieldBegin('swap_short', TType::DOUBLE, 30);
      $xfer += $output->writeDouble($this->swap_short);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->swap_rollover3days !== null) {
      $xfer += $output->writeFieldBegin('swap_rollover3days', TType::I32, 31);
      $xfer += $output->writeI32($this->swap_rollover3days);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->contract_size !== null) {
      $xfer += $output->writeFieldBegin('contract_size', TType::DOUBLE, 32);
      $xfer += $output->writeDouble($this->contract_size);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->tick_value !== null) {
      $xfer += $output->writeFieldBegin('tick_value', TType::DOUBLE, 33);
      $xfer += $output->writeDouble($this->tick_value);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->tick_size !== null) {
      $xfer += $output->writeFieldBegin('tick_size', TType::DOUBLE, 34);
      $xfer += $output->writeDouble($this->tick_size);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->stops_level !== null) {
      $xfer += $output->writeFieldBegin('stops_level', TType::I32, 35);
      $xfer += $output->writeI32($this->stops_level);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->gtc_pendings !== null) {
      $xfer += $output->writeFieldBegin('gtc_pendings', TType::I32, 36);
      $xfer += $output->writeI32($this->gtc_pendings);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->margin_mode !== null) {
      $xfer += $output->writeFieldBegin('margin_mode', TType::I32, 37);
      $xfer += $output->writeI32($this->margin_mode);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->margin_initial !== null) {
      $xfer += $output->writeFieldBegin('margin_initial', TType::DOUBLE, 38);
      $xfer += $output->writeDouble($this->margin_initial);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->margin_maintenance !== null) {
      $xfer += $output->writeFieldBegin('margin_maintenance', TType::DOUBLE, 39);
      $xfer += $output->writeDouble($this->margin_maintenance);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->margin_hedged !== null) {
      $xfer += $output->writeFieldBegin('margin_hedged', TType::DOUBLE, 40);
      $xfer += $output->writeDouble($this->margin_hedged);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->margin_divider !== null) {
      $xfer += $output->writeFieldBegin('margin_divider', TType::DOUBLE, 41);
      $xfer += $output->writeDouble($this->margin_divider);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->point !== null) {
      $xfer += $output->writeFieldBegin('point', TType::DOUBLE, 42);
      $xfer += $output->writeDouble($this->point);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->multiply !== null) {
      $xfer += $output->writeFieldBegin('multiply', TType::DOUBLE, 43);
      $xfer += $output->writeDouble($this->multiply);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->long_only !== null) {
      $xfer += $output->writeFieldBegin('long_only', TType::I32, 44);
      $xfer += $output->writeI32($this->long_only);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->instant_max_volume !== null) {
      $xfer += $output->writeFieldBegin('instant_max_volume', TType::I32, 45);
      $xfer += $output->writeI32($this->instant_max_volume);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->margin_currency !== null) {
      $xfer += $output->writeFieldBegin('margin_currency', TType::STRING, 46);
      $xfer += $output->writeString($this->margin_currency);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->freeze_level !== null) {
      $xfer += $output->writeFieldBegin('freeze_level', TType::I32, 47);
      $xfer += $output->writeI32($this->freeze_level);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->margin_hedged_strong !== null) {
      $xfer += $output->writeFieldBegin('margin_hedged_strong', TType::I32, 48);
      $xfer += $output->writeI32($this->margin_hedged_strong);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->value_date !== null) {
      $xfer += $output->writeFieldBegin('value_date', TType::I64, 49);
      $xfer += $output->writeI64($this->value_date);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->quotes_delay !== null) {
      $xfer += $output->writeFieldBegin('quotes_delay', TType::I32, 50);
      $xfer += $output->writeI32($this->quotes_delay);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->swap_openprice !== null) {
      $xfer += $output->writeFieldBegin('swap_openprice', TType::I32, 51);
      $xfer += $output->writeI32($this->swap_openprice);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class MT4ChartInfo {
  static $_TSPEC;

  /**
   * @var string
   */
  public $symbol = null;
  /**
   * @var int
   */
  public $period = null;
  /**
   * @var int
   */
  public $start = null;
  /**
   * @var int
   */
  public $_end = null;
  /**
   * @var int
   */
  public $timesign = null;
  /**
   * @var int
   */
  public $mode = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'symbol',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'period',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'start',
          'type' => TType::I64,
          ),
        4 => array(
          'var' => '_end',
          'type' => TType::I64,
          ),
        5 => array(
          'var' => 'timesign',
          'type' => TType::I64,
          ),
        6 => array(
          'var' => 'mode',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['symbol'])) {
        $this->symbol = $vals['symbol'];
      }
      if (isset($vals['period'])) {
        $this->period = $vals['period'];
      }
      if (isset($vals['start'])) {
        $this->start = $vals['start'];
      }
      if (isset($vals['_end'])) {
        $this->_end = $vals['_end'];
      }
      if (isset($vals['timesign'])) {
        $this->timesign = $vals['timesign'];
      }
      if (isset($vals['mode'])) {
        $this->mode = $vals['mode'];
      }
    }
  }

  public function getName() {
    return 'MT4ChartInfo';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->symbol);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->period);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->start);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->_end);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->timesign);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->mode);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('MT4ChartInfo');
    if ($this->symbol !== null) {
      $xfer += $output->writeFieldBegin('symbol', TType::STRING, 1);
      $xfer += $output->writeString($this->symbol);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->period !== null) {
      $xfer += $output->writeFieldBegin('period', TType::I32, 2);
      $xfer += $output->writeI32($this->period);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->start !== null) {
      $xfer += $output->writeFieldBegin('start', TType::I64, 3);
      $xfer += $output->writeI64($this->start);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->_end !== null) {
      $xfer += $output->writeFieldBegin('_end', TType::I64, 4);
      $xfer += $output->writeI64($this->_end);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->timesign !== null) {
      $xfer += $output->writeFieldBegin('timesign', TType::I64, 5);
      $xfer += $output->writeI64($this->timesign);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->mode !== null) {
      $xfer += $output->writeFieldBegin('mode', TType::I32, 6);
      $xfer += $output->writeI32($this->mode);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class MT4RateInfo {
  static $_TSPEC;

  /**
   * @var int
   */
  public $ctm = null;
  /**
   * @var double
   */
  public $open = null;
  /**
   * @var double
   */
  public $high = null;
  /**
   * @var double
   */
  public $low = null;
  /**
   * @var double
   */
  public $close = null;
  /**
   * @var double
   */
  public $vol = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'ctm',
          'type' => TType::I64,
          ),
        2 => array(
          'var' => 'open',
          'type' => TType::DOUBLE,
          ),
        3 => array(
          'var' => 'high',
          'type' => TType::DOUBLE,
          ),
        4 => array(
          'var' => 'low',
          'type' => TType::DOUBLE,
          ),
        5 => array(
          'var' => 'close',
          'type' => TType::DOUBLE,
          ),
        6 => array(
          'var' => 'vol',
          'type' => TType::DOUBLE,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['ctm'])) {
        $this->ctm = $vals['ctm'];
      }
      if (isset($vals['open'])) {
        $this->open = $vals['open'];
      }
      if (isset($vals['high'])) {
        $this->high = $vals['high'];
      }
      if (isset($vals['low'])) {
        $this->low = $vals['low'];
      }
      if (isset($vals['close'])) {
        $this->close = $vals['close'];
      }
      if (isset($vals['vol'])) {
        $this->vol = $vals['vol'];
      }
    }
  }

  public function getName() {
    return 'MT4RateInfo';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->ctm);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->open);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->high);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->low);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->close);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->vol);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('MT4RateInfo');
    if ($this->ctm !== null) {
      $xfer += $output->writeFieldBegin('ctm', TType::I64, 1);
      $xfer += $output->writeI64($this->ctm);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->open !== null) {
      $xfer += $output->writeFieldBegin('open', TType::DOUBLE, 2);
      $xfer += $output->writeDouble($this->open);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->high !== null) {
      $xfer += $output->writeFieldBegin('high', TType::DOUBLE, 3);
      $xfer += $output->writeDouble($this->high);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->low !== null) {
      $xfer += $output->writeFieldBegin('low', TType::DOUBLE, 4);
      $xfer += $output->writeDouble($this->low);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->close !== null) {
      $xfer += $output->writeFieldBegin('close', TType::DOUBLE, 5);
      $xfer += $output->writeDouble($this->close);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->vol !== null) {
      $xfer += $output->writeFieldBegin('vol', TType::DOUBLE, 6);
      $xfer += $output->writeDouble($this->vol);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}


